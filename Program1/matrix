#!/bin/bash

# CS344 Program 1
# David LaMartina
# lamartid@oregonstate.edu
# Due April 22, 2019

# matrix: Basic matrix operations:
#   dimensions
#   transpose
#   mean
#   add
#   multiply

# Ensure all temp files are deleted; all temps include procID
trap "rm -f *$$*" INT HUP TERM EXIT

################################################################################
# argsReadable():
#   Verifies readability of arguments
# Input:
#   Series of argumentes of indefinite length
# Output:
#   If all args are readable, exit 0
#   If any arg is unreadable, exit 1 with error message
################################################################################
function argsReadable(){
    for arg in $@; do
        if ! [[ -r $arg ]]; then
            echo "Check your arguments. $arg is not readable" >&2
            exit 1
        fi
    done
    exit 0
}
################################################################################
# argsNum(): 
#   Verifies a correct number of arguments
# Input:
#   First arg: correct number of arguments
#   Subsequent args: arguments passed in to be counted
# Output:
#   Exit 0 if number of arguments from 2 upward matches the first argument
#   Exit 1 with error message if discrepancy
################################################################################
function argsNum(){
    numArgs=0
    for arg in ${@:2}; do
        numArgs=$(($numArgs + 1))
    done
    if [ $numArgs -eq $1 ]; then
        exit 0
    else
        echo "You have entered an incorrect number of arguments" >&2
        exit 1
    fi
}

################################################################################
# divNearest():
#   Divides arg 1 by arg 2 and returns rounded result
# Input:
#   2 integer arguments, 1st to be divided by second
# Output:
#   Rounded result of division. Positive results round up at 0.5, negative down.
################################################################################
function divNearest(){
    echo $(( ($1 + ($2 / 2) * ( ($1 > 0) * 2 - 1 )) / $2))
}

################################################################################
# average():
#   Finds average of indefinite number of integer arguments
# Input:
#   Indefinite number of integer arguments
# Output:
#   Rounded average - rounding performed by divNearest()
################################################################################
function average(){
    sum=0
    numArgs=0
    for num in "$@"; do
        sum=$(($sum + num))
        numArgs=$(($numArgs + 1))
    done
    echo $(divNearest $sum $numArgs)
}

################################################################################
# getNumCols():
#   Find number of columns in a matrix
# Input:
#   Rectangular matrix
# Output:
#   Number of columns
################################################################################
function getNumCols(){
    colCount=0
        for col in $(cat $1 | head -n 1); do
            colCount=$(($colCount + 1)); done
    echo $colCount
}


################################################################################
# dims():
#   Outputs the dimensions of a matrix in 'ROWS COLUMNS' format.
# Input:
#   One rectangular matrix of integers
# Output:
#   Echos dimensions if valid.
#   Exits 1 with error message args > 1 or input is unreadable
################################################################################
function dims(){
    if ! ((argsNum 1 ${@:1}) && (argsReadable ${@:1})); then
        exit 1
    else
        rows=0; cols=0;
        while read line; do
            rows=$(($rows + 1))
        done < $1
        for item in $(cat $1 | head -n 1); do
            cols=$(($cols + 1))
        done
        echo "$rows $cols"
        exit 0
    fi
}
################################################################################
# transpose():
#   'Reflects' elements of a matrix along its main (top-left to bottom-right)
# Input:
#   One rectangular matrix of integers
# Output:
#   Echos reflected matrix if valid.
#   Exits 1 with ereror message if args > 1 or input is unreadable
################################################################################
function transpose(){
    if ! ((argsNum 1 ${@:1}) && (argsReadable ${@:1})); then
        exit 1
    else
        # Iterate through fields, using index to grab column. Transpose one
        # column at a time and output with paste single-line option to retain
        # appropriate tabs and new lines.
        # Solution using paste courtesy of
        # https://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
        idx=0
        for item in $(cat $1 | head -n 1); do
            idx=$((idx + 1))
            cut -f $idx $1 | paste -s
        done
    fi
}

################################################################################
# mean():
#   Given MxN matrix, outputs a 1xN vector, each element of which is the mean
#   of its associated column in the original matrix
# Input:
#   One rectangular matrix of integers
# Output:
#   1xN (1 x number of columns) vector representing means of original columns
################################################################################
function mean(){
    if ! ((argsNum 1 ${@:1}) && (argsReadable ${@:1})); then
        exit 1
    else
        # Get count of columns for summation and averaging
        numRows=$(wc -l < $1)
        colCount=$(getNumCols $1)
        #colCount=0
        #for col in $(cat $1 | head -n 1); do
        #    colCount=$(($colCount + 1)); done
        # Sum each column and average
        for ((i=1; i<=$colCount; i++)); do
            sum=0
            for num in $(cut -f $i $1); do
                sum=$(($sum + $num)); done
            average=$(divNearest $sum $numRows)
            # Print average and tab unless last column; then print new line
            (($i < $colCount)) && char="\t" || char="\n"
            echo -e -n "$average$char"
        done
    fi
    exit 0
}

################################################################################
# add():
#   Element-wise addition of two MxN matrices
# Input:
#   Two matrices of equal dimensions
# Output:
#   If valid input, MxN matrix representing addition of originals
#   If invalid input, exit 1 with error message
################################################################################
function add(){
    # Verify correct number and readability of arguments
    if ! ((argsNum 2 ${@:1}) && (argsReadable ${@:1})); then
        exit 1
    # Verify matrices are same size
    elif ! ([ "$(dims $1)" = "$(dims $2)" ]); then
        echo "matrix add requires 2 matrices of the same size." >&2
        exit 1
    else
        # Temp files for storing 1 row at a time from each matrix
        temp1="temp1$$"
        temp2="temp2$$"
        # Get numbers of rows & cols to use indexed for loop --> 
        # allows program to grab both matrices' values in same loop
        numRows=$(wc -l < $1)
        numCols=$(getNumCols $1)
        for ((i=1; i<=$numRows; i++)); do
            # Grab nth row of each matrix. Store as file to enable cut
            cat $1 | head -$i | tail -1 > $temp1
            cat $2 | head -$i | tail -1 > $temp2
            # Field from each row contains only element of interest for sum
            for ((j=1; j<=$numCols; j++)); do
                num1=$(cut -f $j $temp1)
                num2=$(cut -f $j $temp2)
                sum=$(($num1 + $num2))
                # If not last col, add tab; otherwise add newline
                (($j < $numCols)) && char="\t" || char="\n"
                echo -e -n "$sum$char"
            done
        done
        rm -f $temp1 $temp2
    fi
    exit 0
}

################################################################################
# multiply():
#   Multiply MxN and NxP matrices
# Input:
#   MxN and NxP rectangular integer matrices (numCols of 1st arg == numRows 2nd)
# Output:
#   If valid input, result of matrix multiplication
#   If invalid input, exit 1 with error message
################################################################################
function multiply(){
    # Verify correct number and readability of arguments
    if ! ((argsNum 2 ${@:1}) && (argsReadable ${@:1})); then
        exit 1
    # Verify multiplication-compatible dimensions
    elif ! ([ "$(getNumCols $1)" = "$(wc -l < $2)" ]); then
        echo "matrix multiply requires MxN and NxP matrices" >&2
        exit 1
    else
        # Temp row for 1st matrix and temp col for 2nd matrix
        tempRow1="tempRow1$$"
        tempCol2="tempCol2$$"
        # Need numRows from 1st matrix and numCols from 2nd
        numRows1=$(wc -l < $1)
        numCols2=$(getNumCols $2)
        # Iterate by row of 1st matrix
        for ((i=1; i<=numRows1; i++)); do
            cat $1 | head -$i | tail -1 > $tempRow1
            # Iterate by columns of 2nd matrix; new sum for each column
            for ((j=1; j<=numCols2; j++)); do
                itemCount=1 # Need item count to grab correct number from row
                sum=0
                cut -f $j $2 > $tempCol2
                while read colNum; do
                    rowNum=$(cut -f $itemCount $tempRow1)
#                    echo "rowNum: $rowNum, colNum: $colNum"
                    sum=$(($sum + ($rowNum * $colNum)))
                    itemCount=$(($itemCount + 1))
                done < $tempCol2
                # If not last col, add tab; otherwise add newline
                (($j < $numCols2)) && char="\t" || char="\n"
                echo -e -n "$sum$char"
           done
        done
        rm -f $tempRow1
        rm -f $tempCol2
    fi
    exit 0
}

################################################################################
# matrix entry: Use temporary datafile to read in from either stdin or file.
#   
################################################################################

datafilepath="datafile$$"
if [ "$#" = "1" ]
then
    cat > "$datafilepath"
    if ! ($1 $datafilepath); then
        exit 1
    fi
elif [ "$#" = "2" ]
then
    datafilepath=$2
    if ! ($1 $datafilepath); then
        exit 1
    fi
else
    if ! ($1 "${@:2}"); then
        exit 1
    fi
fi
rm -f *$$*
exit 0
